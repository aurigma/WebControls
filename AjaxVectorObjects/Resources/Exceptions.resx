<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadRequest" xml:space="preserve">
    <value>"{0}" resource not found.</value>
  </data>
  <data name="CanNotDeserializeCanvas" xml:space="preserve">
    <value>Can not deserialize canvas.</value>
  </data>
  <data name="CanNotDownloadImage" xml:space="preserve">
    <value>Can not download image.</value>
  </data>
  <data name="CanNotDrawImageByUrl" xml:space="preserve">
    <value>Can not draw non-cached image.</value>
  </data>
  <data name="CanNotParseSvgVoContent" xml:space="preserve">
    <value>Can not parse SvgVoContent.</value>
  </data>
  <data name="CanNotParseSvgVoCurvedText" xml:space="preserve">
    <value>Can not parse SvgVoCurvedText.</value>
  </data>
  <data name="CanNotParseSvgVoDashLine" xml:space="preserve">
    <value>Can not parse SvgVoDashLine.</value>
  </data>
  <data name="CanNotParseSvgVoImage" xml:space="preserve">
    <value>Can not parse SvgVoImage.</value>
  </data>
  <data name="CanNotParseSvgVoPlaceholder" xml:space="preserve">
    <value>Can not parse SvgVoPlaceholder.</value>
  </data>
  <data name="CanNotParseSvgVoSvg" xml:space="preserve">
    <value>Can not parse SvgVoSvg.</value>
  </data>
  <data name="CanNotParseSvgVoText" xml:space="preserve">
    <value>Can not parse SvgVoText.</value>
  </data>
  <data name="CanNotSerializeCanvas" xml:space="preserve">
    <value>Can not serialize canvas</value>
  </data>
  <data name="ConNotGetDefaultColorForUnknownColorSpace" xml:space="preserve">
    <value>Can not get default color for unknown color space.</value>
  </data>
  <data name="DownloadDeny" xml:space="preserve">
    <value>Download images is not allowed. You can allow it in configuration file.</value>
  </data>
  <data name="DpiOutOfRange" xml:space="preserve">
    <value>DPI should be greater than zero (0).</value>
  </data>
  <data name="ImageFileNotFound" xml:space="preserve">
    <value>Image file not found.</value>
  </data>
  <data name="ItemBelongsCollection" xml:space="preserve">
    <value>The item already belongs to this collection, or to another collection.</value>
  </data>
  <data name="LayerOutOfRange" xml:space="preserve">
    <value>Layer with specified index ({0}) not found.</value>
  </data>
  <data name="MissingFileIdParameter" xml:space="preserve">
    <value>Parameter "f" is missing.</value>
  </data>
  <data name="NoPipelineElements" xml:space="preserve">
    <value>No pipeline elements.</value>
  </data>
  <data name="ReadOnlyCollection" xml:space="preserve">
    <value>This collection is read only.</value>
  </data>
  <data name="RenderCanvasWorkspace" xml:space="preserve">
    <value>An unexpected error has occured while rendering canvas workspace.</value>
  </data>
  <data name="ScriptManagerControlRequired" xml:space="preserve">
    <value>A ScriptManager control must exist on the current page.</value>
  </data>
  <data name="SourceFormat" xml:space="preserve">
    <value>The image URL is incorrectly formatted.</value>
  </data>
  <data name="UnableDeserializeCanvas" xml:space="preserve">
    <value>Unable to deserialize canvas state.</value>
  </data>
  <data name="UnableDeserializeFile" xml:space="preserve">
    <value>Unable to deserialize file.</value>
  </data>
  <data name="UnableLoadColorProfile" xml:space="preserve">
    <value>Unable to load color profile from file.</value>
  </data>
  <data name="VObjectOutOfRange" xml:space="preserve">
    <value>VObject with specified index ({0}) not found.</value>
  </data>
</root>